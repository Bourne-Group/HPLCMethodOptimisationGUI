! Macro code written by Thomas Dixon.
! This macro reads the excel file that contains method conditions set by MATLAB, and
! sets the conditions ready for the method to be executed.
Name EditMeth
  ! Pre-defines the variables that are used to set the method condtions.
  local APercent$, BPercent$, CPercent$, DPercent$, Flow$, MethRows$, MaxTime$, Temperature$
  local BTemp$, CTemp$, DTemp$, Timetemp$, FlowTemp$, PressTemp$ 

  ! Creates a 'dynamic data exchange' with an open excel file so that the method data
  ! can be read.
  on error CloseDDE
  Chan = DDEInitiate("EXCEL", "C:\Users\eng_adm\Desktop\Tom\Macro code\Tomv4\MethodFile.xls")

  !!! Set the initial conditions for the pump based on the values in the excel sheet.
  ! Extract the different variables given the row and column number.
  DDERequest Chan, "R1C2", APercent 	! % of solvent A (aqueous phase).
  DDERequest Chan, "R2C2", BPercent 	! % of solvent B (organic modifier).
  DDERequest Chan, "R3C2", CPercent 	! % of solvent C (custom).
  DDERequest Chan, "R4C2", DPercent 	! % of solvent D (custom).
  DDERequest Chan, "R5C2", Flow     	! Flow rate in ml min-1.
  DDERequest Chan, "R6C2", MethRows 	! Number of rows in the method to be read.
  DDERequest Chan, "R1C5", MaxTime  	! The overall method time.

  ! Initially change pump settings to the initial starting conditions. The table that
  ! stores the method data is deleted and then recreated using the correct headings.
  ! used before. Creating table from scratch helped to prevent several issues.
  ! Note the table is stored in the "RCPMP1Method[1]" register as "Timetable".
  DelTab RCPMP1Method[1], "Timetable"	! Deletes the table.
  
  ! Sets all the initial pump conditions. Even though table is deleted this still works
  ! and not sure why but appears to be required.
  SetObjHdrVal RCPMP1Method[1], "PumpChannel_CompositionPercentage", APercent
  SetObjHdrVal RCPMP1Method[1], "PumpChannel2_CompositionPercentage", BPercent
  SetObjHdrVal RCPMP1Method[1], "PumpChannel3_CompositionPercentage", CPercent
  SetObjHdrVal RCPMP1Method[1], "PumpChannel4_CompositionPercentage", DPercent
  SetObjHdrVal RCPMP1Method[1], "Flow", Flow
  SetObjHdrText RCPMP1Method[1], "StopTime_Mode", "Set"
  SetObjHdrVal RCPMP1Method[1], "StopTime_Time", MaxTime
  SetObjHdrText RCPMP1Method[1], "PostTime_Mode", "Off"

  ! Pauses in program are required as too many actions happening too quickly stops
  ! macros from working correctly.
  Sleep 0.2
  ! Initialises the changes made (updates the pump).
  DownloadRCMethod PMP1

  !!! Settings for the oven.
  ! Note the table is stored in the "RCTHM1Method[1]" register.
  DDERequest Chan, "R3C5", Temperature	! The oven temperature.

  ! Sets both sides of the column oven to the correct temperature.
  SetObjHdrText RCTHM1Method[1], "TemperatureControl_Mode", "Set"
  SetObjHdrVal RCTHM1Method[1], "TemperatureControl_Temperature", Temperature
  SetObjHdrText RCTHM1Method[1], "TemperatureControl2_Mode", "Set"
  SetObjHdrVal RCTHM1Method[1], "TemperatureControl2_Temperature", Temperature
  Sleep 0.2	! Pause to ensure changes are made.
  ! Initialises the changes made (updates the pump)
  DownloadRCMethod THM1
  !!! Create method table based on number of rows submitted. This part is tedious
  ! to get working. Each row in the table alternates between "SolventCompostion" mode
  ! and "Flow" mode which is defined by the "Function" column in the table.
  ! "SolventCompostion" defines the time and solvent % being changed to where as "Flow"
  ! mode defines the flowrate at that time. If using Chemsation and editing the method
  ! this table can be observed in the method screen selecting the "Function centric" mode.

  ! Inital set up stage. 
  DDERequest Chan, "R9C1", Timetemp	! Extracted first time
  DDERequest Chan, "R9C3", BTemp	! Extracted first % B solvent
  DDERequest Chan, "R9C4", CTemp	! Extracted first % C solvent
  DDERequest Chan, "R9C5", DTemp	! Extracted first % D solvent
  DDERequest Chan, "R9C6", FlowTemp	! Extracted first flow rate

  DelTab RCPMP1Method[1], "Timetable"	! Deletes the table that contains the method conditions.
  NewTab RCPMP1Method[1], "Timetable"	! Recreates the table from scratch.

  ! Inserts first row.
  InsTabRow RCPMP1Method[1], "Timetable"
  ! Creates all the column names for the "SolventCompostion" mode and sets default values.
  NewColText RCPMP1Method[1], "Timetable", "Function", "SolventComposition" 
  NewColVal RCPMP1Method[1], "Timetable", "Time", Timetemp
  NewColVal RCPMP1Method[1], "Timetable", "SolventCompositionPumpChannel2_Percentage", BTemp
  NewColVal RCPMP1Method[1], "Timetable", "SolventCompositionPumpChannel3_Percentage", CTemp
  NewColVal RCPMP1Method[1], "Timetable", "SolventCompositionPumpChannel4_Percentage", DTemp
  ! Creates a new row for the "Flow" mode and sets default values.
  InsTabRow RCPMP1Method[1], "Timetable"
  SetTabText RCPMP1Method[1], "Timetable", 2, "Function", "Flow"
  NewColVal RCPMP1Method[1], "Timetable", "FlowFlow", Flow
  SetTabVal RCPMP1Method[1], "Timetable", 2, "FlowFlow", Flow
  Sleep 0.2	! Pause to ensure changes are made.

  ! Initialises the changes made (updates the pump).
  DownloadRCMethod PMP1
  Sleep 0.2 	! Pause to ensure changes are made.
  
  !!! Loop through each row set in the excel sheet and add the method condition to the
  ! method table in Chemstation.
  ! If not just one row (two or more).
  If not(MethRows = 1) then
    ! Starts with the second row and ends with the number of rows that was initial defined.
    For Rows = 2 to MethRows
      ! The row number. Starts at 8 and then adds on "Rows" to give the current row number.
      ! Then is converted to a string so that it can be used with the next part e.g. "R10C1" etc.
      currRow$ = VAL$(8 + Rows)
      ! Obtain data from the excel sheet depending on the currRow that was computed.
      DDERequest Chan, "R" +  currRow$ + "C1", Timetemp		! Current Time
      DDERequest Chan, "R" +  currRow$ + "C3", BTemp		! Current B %
      DDERequest Chan, "R" +  currRow$ + "C4", CTemp		! Current C %
      DDERequest Chan, "R" +  currRow$ + "C5", DTemp		! Current D %
      DDERequest Chan, "R" +  currRow$ + "C6", FlowTemp		! Current flow rate
      Sleep 1 	! Pause to ensure changes are made

      ! Insert a new row for the "SolventComposition" function. Sleeps in-between each step
      ! may not be required but during testing helped to make it work consistently.
      InsTabRow RCPMP1Method[1], "Timetable"
      Sleep 0.1

      ! Obtain the current number of rows so that it is always editing the last row.
      RowNumb = TabHdrVal(RCPMP1Method[1], "Timetable", "NumberOfRows")
      Sleep 0.1
      ! Set the current function.
      SetTabText RCPMP1Method[1], "Timetable", RowNumb, "Function", "SolventComposition"
      Sleep 0.1
      ! Set the current time.
      SetTabVal RCPMP1Method[1], "Timetable", RowNumb, "Time", Timetemp
      Sleep 0.1
      ! Set the current B %.
      SetTabVal RCPMP1Method[1], "Timetable", RowNumb, "SolventCompositionPumpChannel2_Percentage", BTemp
      Sleep 0.1
      ! Set the current C %.
      SetTabVal RCPMP1Method[1], "Timetable", RowNumb, "SolventCompositionPumpChannel3_Percentage", CTemp
      Sleep 0.1
      ! Set the current D %.
      SetTabVal RCPMP1Method[1], "Timetable", RowNumb, "SolventCompositionPumpChannel4_Percentage", DTemp
      Sleep 1
      ! initialises the changes made (updates the pump).
      DownloadRCMethod PMP1
      Sleep 1
      ! Insert a new row for the "Flow" function. 
      InsTabRow RCPMP1Method[1], "Timetable"
      Sleep 0.1
      ! Obtain the current number of rows so that it is always editing the last row.
      RowNumb = TabHdrVal(RCPMP1Method[1], "Timetable", "NumberOfRows")
      Sleep 0.1
      ! Set the current function.
      SetTabText RCPMP1Method[1], "Timetable", RowNumb , "Function", "Flow"
      Sleep 0.1
      ! Set the current flow rate.
      SetTabVal RCPMP1Method[1], "Timetable", RowNumb , "FlowFlow", FlowTemp
      Sleep 0.1
      ! Set the current time.
      SetTabVal RCPMP1Method[1], "Timetable", RowNumb , "Time", Timetemp
      Sleep 1
      ! initialises the changes made (updates the pump).
      DownloadRCMethod PMP1
      Sleep 1
      ! End of loop.
    Next Rows
  EndIf
  
! Writes to console that the method has loaded.
  print "Method loaded"
  ! Stops the 'dynamic data exchange'.
  DDETerminate Chan
  Return
EndMacro

! This is a function that terminates the channel and notifies the user if an error
! occured with reading the file.
Name CloseDDE
  Local Button
  DDETerminate Chan
  Button = Alert ("Stopped on error",3)
  Return
EndMacro
